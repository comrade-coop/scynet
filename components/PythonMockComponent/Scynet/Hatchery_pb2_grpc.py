# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import Hatchery_pb2 as Hatchery__pb2
import Shared_pb2 as Shared__pb2


class HatcheryStub(object):
  """*
  The interface used by the components to call the hatchery.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RegisterComponent = channel.unary_unary(
        '/Scynet.Hatchery/RegisterComponent',
        request_serializer=Hatchery__pb2.ComponentRegisterRequest.SerializeToString,
        response_deserializer=Hatchery__pb2.ComponentRegisterResponse.FromString,
        )
    self.RegisterAgent = channel.unary_unary(
        '/Scynet.Hatchery/RegisterAgent',
        request_serializer=Hatchery__pb2.AgentRegisterRequest.SerializeToString,
        response_deserializer=Hatchery__pb2.AgentRegisterResponse.FromString,
        )
    self.UnregisterComponent = channel.unary_unary(
        '/Scynet.Hatchery/UnregisterComponent',
        request_serializer=Hatchery__pb2.ComponentUnregisterRequest.SerializeToString,
        response_deserializer=Shared__pb2.Void.FromString,
        )
    self.AgentStopped = channel.unary_unary(
        '/Scynet.Hatchery/AgentStopped',
        request_serializer=Hatchery__pb2.AgentStoppedEvent.SerializeToString,
        response_deserializer=Shared__pb2.Void.FromString,
        )


class HatcheryServicer(object):
  """*
  The interface used by the components to call the hatchery.
  """

  def RegisterComponent(self, request, context):
    """Register a component so the hatchery knows it is available and can execute eggs.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RegisterAgent(self, request, context):
    """Gives an egg to the hatchery, this way it knows that a new egg was generated by the queen or the available harvester functions.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UnregisterComponent(self, request, context):
    """Used in case the whole component dies, or it was turned off in case of an upgrade.
    Should delete any agents owned by this component.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AgentStopped(self, request, context):
    """Notifies that hatchery that an agent has stopped/crashed.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HatcheryServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RegisterComponent': grpc.unary_unary_rpc_method_handler(
          servicer.RegisterComponent,
          request_deserializer=Hatchery__pb2.ComponentRegisterRequest.FromString,
          response_serializer=Hatchery__pb2.ComponentRegisterResponse.SerializeToString,
      ),
      'RegisterAgent': grpc.unary_unary_rpc_method_handler(
          servicer.RegisterAgent,
          request_deserializer=Hatchery__pb2.AgentRegisterRequest.FromString,
          response_serializer=Hatchery__pb2.AgentRegisterResponse.SerializeToString,
      ),
      'UnregisterComponent': grpc.unary_unary_rpc_method_handler(
          servicer.UnregisterComponent,
          request_deserializer=Hatchery__pb2.ComponentUnregisterRequest.FromString,
          response_serializer=Shared__pb2.Void.SerializeToString,
      ),
      'AgentStopped': grpc.unary_unary_rpc_method_handler(
          servicer.AgentStopped,
          request_deserializer=Hatchery__pb2.AgentStoppedEvent.FromString,
          response_serializer=Shared__pb2.Void.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Scynet.Hatchery', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
