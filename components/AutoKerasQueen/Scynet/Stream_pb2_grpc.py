# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import Shared_pb2 as Shared__pb2
import Stream_pb2 as Stream__pb2


class PublisherStub(object):
  """The publishing api that will be used exclusively by the agents.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Publish = channel.unary_unary(
        '/Scynet.Publisher/Publish',
        request_serializer=Stream__pb2.PublishRequest.SerializeToString,
        response_deserializer=Stream__pb2.PublishResponse.FromString,
        )


class PublisherServicer(object):
  """The publishing api that will be used exclusively by the agents.
  """

  def Publish(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PublisherServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=Stream__pb2.PublishRequest.FromString,
          response_serializer=Stream__pb2.PublishResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Scynet.Publisher', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SubscriberStub(object):
  """The subscriber api is used both by agents and other hatcheries.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Subscribe = channel.unary_unary(
        '/Scynet.Subscriber/Subscribe',
        request_serializer=Stream__pb2.SubscriptionRequest.SerializeToString,
        response_deserializer=Stream__pb2.SubscriptionResponse.FromString,
        )
    self.Unsubscribe = channel.unary_unary(
        '/Scynet.Subscriber/Unsubscribe',
        request_serializer=Stream__pb2.UnsubscribeRequest.SerializeToString,
        response_deserializer=Shared__pb2.Void.FromString,
        )
    self.Acknowledge = channel.unary_unary(
        '/Scynet.Subscriber/Acknowledge',
        request_serializer=Stream__pb2.AcknowledgeRequest.SerializeToString,
        response_deserializer=Shared__pb2.Void.FromString,
        )
    self.StreamingPull = channel.unary_stream(
        '/Scynet.Subscriber/StreamingPull',
        request_serializer=Stream__pb2.StreamingPullRequest.SerializeToString,
        response_deserializer=Stream__pb2.StreamingPullResponse.FromString,
        )
    self.Seek = channel.unary_unary(
        '/Scynet.Subscriber/Seek',
        request_serializer=Stream__pb2.SeekRequest.SerializeToString,
        response_deserializer=Shared__pb2.Void.FromString,
        )


class SubscriberServicer(object):
  """The subscriber api is used both by agents and other hatcheries.
  """

  def Subscribe(self, request, context):
    """Create a subscriber that we will use to listen to the messages produced by the agents.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Unsubscribe(self, request, context):
    """Delete
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Acknowledge(self, request, context):
    """Tell the subscriber that the message was saved or transformed, and we don't want it again.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamingPull(self, request, context):
    """
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Seek(self, request, context):
    """
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SubscriberServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Subscribe': grpc.unary_unary_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=Stream__pb2.SubscriptionRequest.FromString,
          response_serializer=Stream__pb2.SubscriptionResponse.SerializeToString,
      ),
      'Unsubscribe': grpc.unary_unary_rpc_method_handler(
          servicer.Unsubscribe,
          request_deserializer=Stream__pb2.UnsubscribeRequest.FromString,
          response_serializer=Shared__pb2.Void.SerializeToString,
      ),
      'Acknowledge': grpc.unary_unary_rpc_method_handler(
          servicer.Acknowledge,
          request_deserializer=Stream__pb2.AcknowledgeRequest.FromString,
          response_serializer=Shared__pb2.Void.SerializeToString,
      ),
      'StreamingPull': grpc.unary_stream_rpc_method_handler(
          servicer.StreamingPull,
          request_deserializer=Stream__pb2.StreamingPullRequest.FromString,
          response_serializer=Stream__pb2.StreamingPullResponse.SerializeToString,
      ),
      'Seek': grpc.unary_unary_rpc_method_handler(
          servicer.Seek,
          request_deserializer=Stream__pb2.SeekRequest.FromString,
          response_serializer=Shared__pb2.Void.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Scynet.Subscriber', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
