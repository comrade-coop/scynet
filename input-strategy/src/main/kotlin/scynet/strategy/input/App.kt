/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package scynet.strategy.input

import java.util.Properties
import com.github.daniel.shuy.kafka.protobuf.serde.KafkaProtobufSerde
import org.apache.kafka.common.serialization.Serdes
import org.apache.kafka.streams.KafkaStreams
import org.apache.kafka.streams.kstream.Consumed
import org.apache.kafka.streams.kstream.Produced
import org.apache.kafka.streams.kstream.KStream
import org.apache.kafka.streams.StreamsBuilder
import org.apache.kafka.streams.StreamsConfig
import ai.scynet.Shared

class InputStrategyStream(componentId: String) {

    public val componentId = componentId

    fun start() {
        val builder = StreamsBuilder()
        val agents: KStream<String, Shared.Agent> = builder.stream(
            "agents",
            Consumed.with(
                Serdes.String(),
                KafkaProtobufSerde<Shared.Agent>(Shared.Agent.parser())
            )
        )
        val results = agents.filter({ _, value -> true })
        results.to(
            "agents-" + componentId,
            Produced.with(
                Serdes.String(),
                KafkaProtobufSerde<Shared.Agent>(Shared.Agent.parser())
            )
        )
        val topology = builder.build()

        val properties = Properties()
        properties.put(StreamsConfig.APPLICATION_ID_CONFIG, "simple-input-strategy")
        properties.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "127.0.0.1:9092")

        val streamRunner = KafkaStreams(topology, properties)
        streamRunner.cleanUp()
        streamRunner.start()
        Runtime.getRuntime().addShutdownHook(Thread(streamRunner::close))
    }
}

fun main(args: Array<String>) {
    println("Starting input strategy for component " + args[0])
    InputStrategyStream(args[0]).start()
}
