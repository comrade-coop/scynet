syntax = "proto3";
import "Shared.proto";

package Scynet;
option csharp_namespace = "Scynet";

// The publishing api that will be used exclusively by the agents.
service Publisher {
	rpc Publish (PublishRequest) returns (PublishResponse) {}
}


// The subscriber api is used both by agents and other hatcheries.
service Subscriber {

	// Create a subscriber that we will use to listen to the messages produced by the agents.
	rpc Subscribe (SubscriptionRequest) returns (SubscriptionResponse) {}

	// Delete
	rpc Unsubscribe (UnsubscribeRequest) returns (Void) {}

	// Tell the subscriber that the message was saved or transformed, and we don't want it again.
	rpc Acknowledge (AcknowledgeRequest) returns (Void) {}

	// 
	rpc StreamingPull(StreamingPullRequest) returns (stream StreamingPullResponse) {}

	//
	rpc Seek (SeekRequest) returns (Void) {}
}

message AcknowledgeRequest {
	string id = 1;
	string acknowledgeMessage = 2;
	uint32 partition = 3;

}

message SeekRequest {
	string id = 1;
	oneof target {
		string index = 2;
		uint64 key = 3;
	}
}

message UnsubscribeRequest {
	string id = 1;
}


message PullRequest {
	string id = 1;
	bool returnImmediately = 2;
	uint32 maxMessages = 3;
}

message PullResponse {
	repeated DataMessage messages = 1;
}

message SubscriptionRequest {
	string id = 1; // Can be the id of an agent, but also the id of onother hatchery.

	oneof agent {
		string agentType = 2; // The type of agent we want to subscribe to. Used when subscriing to remote agents that
		string agetnId = 3; // The agent's output that we will subscribe to.
	}

	bool strongOrdering = 4; // Used to determine if we want the order of the messages to be absoulte.

	uint64 timeout = 5; // The subscriber will be deleted after inactivity.

	uint32 bufferSize = 6; // The subscriber will have a buffer to help with backbressure and/or not to overload the client.
}

message SubscriptionResponse {
	string agentId = 1;
}

message DataMessage {
	bytes data = 1;
	string index = 2; // the thing needed to ack the message.
	uint64 key = 3;
	string partitionKey = 4;
	uint32 partition = 5;
	bool redelivary = 6;
}

message PublishRequest {
	string agentId = 1;
	repeated DataMessage message = 2;
}

message PublishResponse {
	repeated string index = 1;
}

message StreamingPullRequest {
	string id = 1;
}

message StreamingPullResponse {
	DataMessage message = 1;
}
