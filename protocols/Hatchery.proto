syntax = "proto3";
import "Shared.proto";

package Scynet;
option csharp_namespace = "Scynet";

/**
* The interface used by the components to call the hatchery.
*/
service Hatchery {
	// Register a component so the hatchery knows it is available and can execute eggs.
	rpc RegisterComponent (ComponentRegisterRequest) returns (ComponentRegisterResponse) {};

	// Gives an egg to the hatchery, this way it knows that a new egg was generated by the queen or the available harvester functions.
	rpc RegisterAgent (AgentRegisterRequest) returns (AgentRegisterResponse) {};

	// Used in case the whole component dies, or it was turned off in case of an upgrade.
	// Should delete any agents owned by this component.
	rpc UnregisterComponent (ComponentUnregisterRequest) returns (Void) {};

	// Notifies that hatchery that an agent has stopped/crashed.
	rpc AgentStopped (AgentStoppedEvent) returns (Void) {};

}

message ComponentRegisterRequest {
	string uuid = 2; // The universal id of the component.
	string address = 1; // The place we can connect to the component to call methods on it.
	repeated string runnerType = 3; // The types of eggs this component can run as agents.
}

message ComponentRegisterResponse {

}

message AgentRegisterRequest {
	Agent agent = 2;
}

message AgentRegisterResponse {

}

message ComponentUnregisterRequest {
	string uuid = 1;
}

message AgentStoppedEvent {
	Agent agent = 1;
	string resaon = 2;
	uint64 code = 3;
}
