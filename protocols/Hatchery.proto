syntax = "proto3";
import "Shared.proto";

package Scynet;
option csharp_namespace = "Scynet";

/**
* The interface used by the components to call the hatchery.
*/
service Hatchery {
	// Register a component so the hatchery knows it is available and can execute eggs.
	rpc RegisterComponent (ComponentRegisterRequest) returns (ComponentRegisterResponse) {};

	// Tells the hatchery that a topic is going to be used by one of the agents to push data to. This will most like result in creating a stream.
	rpc RegisterTopic (TopicRegisterRequest) returns (TopicRegisterRespnse) {};

	// Gives an egg to the hatchery, this way it knows that a new egg was generated by the queen or the available harvester functions.
	rpc RegisterEgg (EggRegisterRequest) returns (EggRegisterResponse) {};

	// Get the resulting stream of an internal/external agent to use by our agent.
	rpc SubscribeAgent (AgentSubscriptionRequest) returns (AgentSubscriptionResponse) {};

	// Check to see if a stream is used by any agent, and in the case it is get the stream and the agent.
	rpc GetStream (StreamReqest) returns (StreamRespose) {};
}


message StreamRespose {
	Stream _stream = 1; // The stream
	Agent owner = 2; // The agent who uses this stream
}

message StreamReqest {
	string topic = 1; // The topic name to search for.
}

message TopicRegisterRequest {
	Topic topic = 1; // The topic name to register and create a stream.
	map<string, string> config = 2; // The configuration for the topic.
}

message TopicRegisterRespnse {

}

message AgentSubscriptionRequest {
	string agentType = 1; // The type of the agent we want to subscribe to
}

message AgentSubscriptionResponse {
	Topic topic = 1; // The topic which we can listen to for the agent output.
}

message EggRegisterRequest {
	string uuid = 1; // The universal id of the egg.
	Egg egg = 2;
}

message EggRegisterResponse {
	
}

message ComponentRegisterRequest {
	string uuid = 1; // The universal id of the component.
	string runnerType = 2; // The types of eggs this component can run as agents.
	bool canExecuteNewEggs = 3; // Can it excute agents that it hasn't registered.
}

message ComponentRegisterResponse {

}