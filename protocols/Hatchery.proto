syntax = "proto3";
import "Shared.proto";

package Scynet;
option csharp_namespace = "Scynet";

/**
* The interface used by the components to call the hatchery.
*/
service HatcheryApi {
	// Register a component so the hatchery knows it is available and can execute eggs.
	rpc RegisterComponent (ComponentRegisterRequest) returns (ComponentRegisterResponse) {};

	// Gives an egg to the hatchery, this way it knows that a new egg was generated by the queen or the available harvester functions.
	// I think there should be a way to garbege collec eggs that are no longer usefull but ...
	rpc RegisterEgg (EggRegisterRequest) returns (EggRegisterResponse) {};

	rpc FindComponent (ComponentRequest) returns (Component) {};

	rpc FindEgg (EggQueryRequest) returns (Egg) {};

	// Used in case the whole component dies, or it was turned off in case of an ubgrade.
	// Should delete any agents owned by this component.
	rpc UnregisterComponent (ComponentRequest) returns (Void) {};

	// Deletes an agent. If an agent crashes or it was destroyd by the comonent.
	rpc HandleAgentStop (AgentStopedEvent) returns (Void) {};

}

message AgentStopedEvent {
	Agent agent = 1;
	string resaon = 2;
	uint64 code = 3;
}

message ComponentRequest {
	string uuid = 1;
}

message EggQueryRequest {
	string uuid = 1;
}

message AgnentQueryRequest {
	string uuid = 1;
}

message AgentSubscriptionRequest {
	string agentType = 1; // The type of the agent we want to subscribe to
}

message EggRegisterRequest {
	string uuid = 1; // The universal id of the egg.
	Egg egg = 2;
}

message EggRegisterResponse {
	
}

message ComponentRegisterRequest {
	string address = 1; // The plase we can connect to the component to call methods on it.
	Component component = 2;
}

message ComponentRegisterResponse {

}
